<Window x:Class="MusicFmApplication.MiniWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:lex="http://schemas.root-project.org/xaml/presentation"
        xmlns:cvt="clr-namespace:CustomControlResources.Converter;assembly=CustomControlResources"
        xmlns:cc="clr-namespace:CustomControlResources;assembly=CustomControlResources"
        Title="{lex:LocText MusicFmApplication:English:MusicFm}"
        Height="190" Width="190"  Icon="{DynamicResource LogoIco32}" x:Name="Root"
        AllowsTransparency="True" WindowStyle="None" ResizeMode="CanMinimize" Background="{x:Null}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/CustomControlResources;component/ImageResource.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/CustomControlResources;component/ControlStyleResources.xaml"/>
                <!--Converter Resource Dictionary-->
                <ResourceDictionary>
                    <cvt:NullToBoolConverter x:Key="Null2Bool"/>
                    <BooleanToVisibilityConverter x:Key="Bool2Visbility"/>
                    <cvt:InverseBoolToVisibilityConverter x:Key="IvsBooltVsby"/>
                    <cvt:NumberToBoolConverter x:Key="Num2Bool"/>
                    <cvt:PercentageToDecimalConverter x:Key="Pct2Dcml" />
                    <cvt:NumberToProgressState x:Key="Num2Pgs"/>
                    <cvt:InverseBoolConverter x:Key="IvsBool"/>
                    <cvt:NullToVisibility x:Key="Null2Vsby"/>
                </ResourceDictionary>
                <!--Style Resource-->
                <ResourceDictionary>
                    <Style TargetType="cc:ColorlizeImage">
                        <!--Let btn to focus easier-->
                        <Setter Property="Background" Value="#02222222"/>
                        <Setter Property="Height" Value="20"/>
                        <Setter Property="Width" Value="20"/>
                        <Setter Property="Color" Value="WhiteSmoke"/>
                        <Setter Property="Opacity" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Canvas}, Path=Opacity}"/>
                        <Style.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Color" Value="DarkGray"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Color" Value="#CCF5F5F5"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo ProgressState="{Binding ElementName=Root, Path=ViewModel.DownloadProgress, Converter={StaticResource Num2Pgs}}"
                         ProgressValue="{Binding ElementName=Root, Path=ViewModel.DownloadProgress, Converter={StaticResource Pct2Dcml}}">
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo ImageSource="{StaticResource Pause32}" DismissWhenClicked="True"
                                 Command="{Binding ElementName=Root, Path=ViewModel.MediaManager.PauseResumePlayerCmd}"
                                 IsEnabled="{Binding ElementName=TmbBtnNext, Path=IsEnabled}"
                                 Visibility="{Binding ElementName=Root, Path=ViewModel.MediaManager.IsPlaying, Converter={StaticResource Bool2Visbility}}"/>
                <ThumbButtonInfo ImageSource="{StaticResource Play32}" DismissWhenClicked="True"
                                 Command="{Binding ElementName=Root, Path=ViewModel.MediaManager.PauseResumePlayerCmd}"
                                 IsEnabled="{Binding ElementName=TmbBtnNext, Path=IsEnabled}"
                                 Visibility="{Binding ElementName=Root, Path=ViewModel.MediaManager.IsPlaying, Converter={StaticResource IvsBooltVsby}}"/>
                <ThumbButtonInfo ImageSource="{StaticResource Heart32}"
                                 Command="{Binding ElementName=Root, Path=ViewModel.LikeSongCmd}"
                                 IsEnabled="{Binding ElementName=TmbBtnNext, Path=IsEnabled}"/>
                <ThumbButtonInfo ImageSource="{StaticResource Delete32}" 
                                 Command="{Binding ElementName=Root, Path=ViewModel.LikeSongCmd}"
                                 CommandParameter="1"
                                 IsEnabled="{Binding ElementName=TmbBtnNext, Path=IsEnabled}"/>
                <ThumbButtonInfo ImageSource="{StaticResource Next32}"  x:Name="TmbBtnNext"
                                 Command="{Binding ElementName=Root, Path=ViewModel.NextSongCmd}"
                                 IsEnabled="{Binding ElementName=Root, Path=ViewModel.CurrentSong, Converter={StaticResource Null2Bool}}"/>
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </Window.TaskbarItemInfo>
    <Grid MouseLeftButtonDown="MainGridOnLeftMouseDown">
        <!--Operation Btns-->
        <Canvas DataContext="{Binding ElementName=Root}"
                Visibility="{Binding ElementName=Root, Path=IsMouseOver, Converter={StaticResource Bool2Visbility}}">
            <Canvas.Style>
                <Style TargetType="Canvas">
                    <Setter Property="Opacity" Value=".01"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=Root, Path=IsMouseOver}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From=".01" To="1" Duration="0:0:.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To=".01" Duration="0:0:.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                        <!--<Trigger Property="Opacity" Value="0">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </Trigger>-->
                    </Style.Triggers>
                </Style>
            </Canvas.Style>
            <!--<Ellipse Height="160" Width="160" Stroke="#66CCCCCC" StrokeThickness="1" Canvas.Left="15" Canvas.Top="15"/>-->
            <Ellipse Height="190" Width="190" Opacity="0.7">
                <Ellipse.Fill>
                    <SolidColorBrush Color="{Binding ViewModel.MediaManager.SongPictureColor}"/>
                </Ellipse.Fill>
            </Ellipse>
            
            <!--Like Song Btn-->
            <cc:ImageButton Canvas.Right="28" Canvas.Top="30"
                            Command="{Binding ViewModel.LikeSongCmd}"
                            ToolTip="{lex:LocText MusicFmApplication:English:LikeSong}">
                <cc:ColorlizeImage Image="{StaticResource Heart32}" >
                    <cc:ColorlizeImage.Style>
                        <Style TargetType="cc:ColorlizeImage" BasedOn="{StaticResource {x:Type cc:ColorlizeImage}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ViewModel.CurrentSong.Like}" Value="1">
                                    <Setter Property="Color" Value="#FFEE3D3D"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </cc:ColorlizeImage.Style>
                </cc:ColorlizeImage>
            </cc:ImageButton>
            <!--Next Song Btn-->
            <cc:ImageButton Canvas.Right="2" Canvas.Top="85"
                            Command="{Binding ViewModel.NextSongCmd}" 
                            IsEnabled="{Binding ViewModel.SongList.Count, Converter={StaticResource Num2Bool}}"
                            ToolTip="{lex:LocText MusicFmApplication:English:NextSong}">
                <cc:ColorlizeImage Image="{StaticResource Next32}"/>
            </cc:ImageButton>
            <!--Delete Song Btn-->
            <cc:ImageButton Canvas.Right="25" Canvas.Bottom="30"
                            Command="{Binding ViewModel.LikeSongCmd}"
                            CommandParameter="1"
                            ToolTip="{lex:LocText MusicFmApplication:English:HateSong}">
                <cc:ColorlizeImage Image="{StaticResource Delete32}"/>
            </cc:ImageButton>
            <!--Set Top Btn-->
            <cc:ImageButton Canvas.Left="28" Canvas.Top="30"
                            Command="{Binding SetTopMostCmd}"
                            ToolTip="{lex:LocText MusicFmApplication:English:TopMost}">
                <cc:ImageButton.Image>
                    <cc:ColorlizeImage Image="{StaticResource Nail24}" Width="10"/>
                </cc:ImageButton.Image>
                <cc:ImageButton.Style>
                    <Style TargetType="cc:ImageButton" BasedOn="{StaticResource {x:Type cc:ImageButton}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=Root, Path=Topmost}" Value="True">
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="45" CenterX="5" CenterY="10"/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </cc:ImageButton.Style>
            </cc:ImageButton>
            <!--Back to home Btn-->
            <cc:ImageButton Canvas.Left="2" Canvas.Top="85"
                            Command="{Binding BackMainWindowCmd}"
                            ToolTip="{lex:LocText MusicFmApplication:English:BackToMainUI}">
                <cc:ColorlizeImage Image="{StaticResource Back24}"/>
            </cc:ImageButton>
            <!--Minimize to taskbar notify icon Btn-->
            <cc:ImageButton Canvas.Left="25" Canvas.Bottom="30"
                            Command="{Binding MinimizeToIconCmd}"
                            ToolTip="{lex:LocText MusicFmApplication:English:Minimize2NotifyIcon}">
                <cc:ColorlizeImage Image="{StaticResource Anchor24}"/>
            </cc:ImageButton>
        </Canvas>
        <!--Album Picture-->
        <Grid>
            <Grid.RenderTransform>
                <RotateTransform/>
            </Grid.RenderTransform>
            <Grid.OpacityMask>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <!--Improtent!!! This control the sharp display of album picture AND Opacity-->
                        <Ellipse Width="50" Height="50" StrokeThickness="21" Stroke="#EFFFFFFF"/>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Grid.OpacityMask>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="RenderTransformOrigin" Value=".5, .5"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="IsHitTestVisible" Value="{Binding ElementName=PlayBtns, Path=IsMouseOver, Converter={StaticResource IvsBool}}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=Root, Path=Visibility}" Value="{x:Static Visibility.Visible}">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To ="1" Duration="0:0:1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard x:Name="PictureRotateStroybard">
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)" To="360" Duration="0:0:15" RepeatBehavior="Forever"/>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To ="1" Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <PauseStoryboard BeginStoryboardName="PictureRotateStroybard"/>
                        </EventTrigger>
                        <DataTrigger Binding="{Binding ElementName=Root, Path=ViewModel.MediaManager.IsPlaying}" Value="False">
                            <DataTrigger.EnterActions>
                                <PauseStoryboard BeginStoryboardName="PictureRotateStroybard"/>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=Root, Path=IsMouseOver}" Value="False"/>
                                <Condition Binding="{Binding ElementName=Root, Path=ViewModel.MediaManager.IsPlaying}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <ResumeStoryboard BeginStoryboardName="PictureRotateStroybard"/>
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.Resources>
                <Style TargetType="Ellipse">
                    <Setter Property="Stroke" Value="#90CCCCCC"/>
                    <Setter Property="StrokeThickness" Value="1"/>
                    <!--<Setter Property="Visibility" Value="{Binding ElementName=Root, Path=ViewModel.MediaManager.SongPicture, Converter={StaticResource Null2Vsby}}"/>-->
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=Root, Path=ViewModel.MediaManager.SongPicture}" Value="{x:Null}">
                            <Setter Property="Fill" Value="{x:Null}"/>
                            <Setter Property="StrokeThickness" Value="0"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Resources>
            <Image Width="128" Height="128" Source="{StaticResource Vinyl128}" />
            <Ellipse Width="128" Height="128"  DataContext="{Binding ElementName=Root}">
                <Ellipse.Fill>
                    <ImageBrush ImageSource="{Binding ViewModel.MediaManager.SongPicture}" Opacity=".88" />
                </Ellipse.Fill>
                <Ellipse.ToolTip>
                    <ToolTip>
                        <TextBlock>
                            <Run Text="{Binding ViewModel.CurrentSong.Artist}"/>
                            <Run Text=" - "/>
                            <Run Text="{Binding ViewModel.CurrentSong.Title}"/>
                        </TextBlock>
                    </ToolTip>
                </Ellipse.ToolTip>
            </Ellipse>
            <Ellipse Width="90" Height="90" />
            <Ellipse Width="50" Height="50" Fill="#AFF5F5F5"/>
        </Grid>
        <!--Play/Pause Btns-->
        <Grid x:Name="PlayBtns"
              DataContext="{Binding ElementName=Root, Path=ViewModel}">
            <Grid.Style>
               <Style TargetType="Grid">
                   <Setter Property="Opacity" Value="0"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=Root, Path=ViewModel.CurrentSong, Converter={StaticResource Null2Bool}}" Value="True"/>
                                <Condition Binding="{Binding ElementName=Root, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To ="1" Duration="0:0:.3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To ="0" Duration="0:0:.3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.Resources>
                <Style TargetType="cc:ImageButton" BasedOn="{StaticResource {x:Type cc:ImageButton}}">
                    <Setter Property="Height" Value="18"/>
                    <Setter Property="Width" Value="18"/>
                </Style>
                <Style TargetType="cc:ColorlizeImage" BasedOn="{StaticResource {x:Type cc:ColorlizeImage}}">
                    <Setter Property="Height" Value="{Binding Path=Height, RelativeSource={RelativeSource FindAncestor, AncestorType=cc:ImageButton}}"/>
                    <Setter Property="Width" Value="{Binding Path=Width, RelativeSource={RelativeSource FindAncestor, AncestorType=cc:ImageButton}}"/>
                    <Setter Property="Opacity" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Grid},  Path=Opacity}"/>
                </Style>
            </Grid.Resources>
            <Ellipse Width="50" Height="50" Opacity=".9">
                <Ellipse.Fill>
                    <SolidColorBrush Color="{Binding ElementName=Root, Path=ViewModel.MediaManager.SongPictureColor}" />
                </Ellipse.Fill>
            </Ellipse>
            <cc:ImageButton Command="{Binding MediaManager.PauseResumePlayerCmd}"
                            IsEnabled="{Binding CurrentSong, Converter={StaticResource Null2Bool}}"
                            Width="14">
                <cc:ImageButton.Image>
                    <cc:ColorlizeImage>
                        <cc:ColorlizeImage.Style>
                            <Style TargetType="cc:ColorlizeImage" BasedOn="{StaticResource {x:Type cc:ColorlizeImage}}">
                                <Setter Property="Image" Value="{StaticResource Play32}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MediaManager.IsPlaying}" Value="True">
                                        <Setter Property="Image" Value="{StaticResource Pause32}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </cc:ColorlizeImage.Style>
                    </cc:ColorlizeImage>
                </cc:ImageButton.Image>
            </cc:ImageButton>
        </Grid>
    </Grid>
</Window>
